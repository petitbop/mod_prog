analyse.txt

TP 2 : OPERATEURS


================================= Question 2 : ================================= 

Différence entre les écritures :
- 	Dvector operator+ (Dvector a, Dvector b)
	Ecriture avec des objets modifiables en paramètres.
- 	Dvector operator+ (const Dvector &a, const Dvector &b)
	Ecriture avec passage de références const (non modifiables) en paramètres.

La deuxième écriture impose que les objets en paramètres ne doivent pas être modifiés.
Il doivent donc être recopiés afin d'être utilisables. 
Cela ajoute en sécurité sur les objets manipulés : lorsqu'on additionne deux objets pour en obtenir un troisième,
il ne doit pas y avoir d'effets de bord modifiant les deux premiers objets.

Il est préférable d'utiliser cette écriture pour les raisons précédentes ainsi que pour éviter
de passer des objets en paramètre, comme dans l'écriture 1, car le passage d'objet est moins performant 
que le passage de pointeur ou ici de référence.


================================= Question 4 : ================================= 

- On peut utiliser l'opérateur += pour implémenter les opérateurs suivants :
	- 		-=
	- 		+ interne/externe
	- 		- interne/externe
- On peut utiliser l'opérateur *= pour implémenter les opérateurs suivants :
	- 		/=
	- 		* interne/externe
	- 		/ interne/externe
- On peut utiliser l'opérateur == pour implémenter les opérateurs suivants :
	-		!=
- On peut utiliser la méthode display() pour implémenter les opérateurs suivants :
	-		<<
- On peut utiliser l'opérateur = pour implémenter le constructeur par copie :
	-		Dvector(Dvector const& x)
Les autres opérateurs : >> = et () en lecture/écriture ne sont pas factorisables.

================================= Question 5 : ================================= 
On teste les performances de l'opérateur = pour un Dvector de taille 10 000
000, dans deux cas :

1. Utilisation de memcpy
2. Boucle for et vérification de non dépassement des bornes par ()

On note t1 et t2 les temps d'exécution respectifs.
On obtient :

t1 = 0.061 s
t2 = 0.173 s

Ainsi, l'utilisation de memcpy permet de diviser par 3 le temps d'une
affectation (le test a été fait sur d'autres tailles de Dvector pour valider
cette affirmation).
